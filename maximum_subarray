def maxSubArray(nums):
        def daq(left, right):
            if left == right:
                return nums[left]
            middle = (left + right) // 2
            leftMax = daq(left, middle)
            rightMax = daq(middle + 1, right)
            crossMax = crossmax(left, right, middle)
            return max(leftMax, rightMax, crossMax)

        def crossmax(left, right, middle):
            leftSum = 0
            leftSuffixMax = float("-inf")
            for pointer in range(middle, left - 1, -1):
                leftSum += nums[pointer]
                leftSuffixMax = max(leftSuffixMax, leftSum)

            rightsum = 0
            rightPrefixMax = float("-inf")
            for pointer in range(middle + 1, right + 1):
                rightsum += nums[pointer]
                rightPrefixMax = max(rightPrefixMax, rightsum)
            return leftSuffixMax + rightPrefixMax

        return daq(0, len(nums) - 1)
item = [-2,1,4,6,-9]
print(maxSubArray(item))


#another solution
 def maxSubArray(self, nums):
        l = [nums.pop(0)]
        for i in range(len(nums)):
            l.append(max(nums[i] , l[-1]+nums[i]))
        
        return max(l)
        
